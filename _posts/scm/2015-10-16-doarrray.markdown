---
layout: post
title:  矩阵键盘
date:   2015-10-16 22:30:15
categories: 单片机
tags: scm
excerpt: 通过理解行列矩阵键盘，和串行数码管的原理，写出来本代码。下面附键盘的

---

### 矩阵键盘

    **

    * 通过理解行列矩阵键盘，和串行数码管的原理，

    *写出来本代码。下面附键盘的

    */​
    #include ​ <reg52.h>
	#define uchar unsigned char
	#define uint unsigned int
	//Led数码管数
	sbit DIO = P2^0;//串行数据输入
	sbit LRCLK = P2^1;//时钟脉冲信号——上升沿有效
	sbit LSCLK = P2^2;//打入信号————上升沿有效
	unsigned char code LED_0F[] =
	{// 0 1 2 34 5 6 78 9 A bC d E F -
	0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x8C,0xBF,0xC6,0xA1,0x86,0xFF,0xbf
	};
	uchar scan_keyboard(void); // 扫描键盘
	void delay_ms(int n); //毫秒级延时函数
	void get_LED(uchar key); //获得LED对应的数组值
	void LED_ON(uchar x); //点亮led数码管
	void main()
	{
		while(1){
			uchar key = scan_keyboard();
			get_LED(key);
		}
	}
	void delay_ms(int n)
	{
		int i = 0, j = 0;
		for(i = 0; i < n; i++)
			for(j = 0; j < 100; j++);
	}

	void LED_ON(uchar lcode)
	{
		uint i;
		for(i = 8;i >= 1; i--)
		{
			if (lcode & 0x80)
				DIO = 1;
			else
				DIO = 0;
			lcode <<= 1;
			LSCLK = 0;
			LSCLK = 1;
		}

	}

	void LED_code(uchar value)

	{
		uchar code *led_table; // 查表指针
		uchar lcode; //要得到的显示码
		//显示第1位
		led_table = LED_0F + value;
		lcode = *led_table;
		LED_ON(lcode);
		LED_ON(0x01);
		LRCLK = 0;
		LRCLK = 1;
		//显示第2位
	}
	
	void get_LED(uchar key)
	{
		if(key == 0x00)
			return; //如果为0x00，说明没有扫描到值，返回
		switch(key)
		{
			case 0xee: LED_code(0);break;//0按下相应的键显示相对应的码值
			case 0xde: LED_code(1);break;//1 按下相应的键显示相对应的码值
			case 0xbe: LED_code(2);break;//2
			case 0x7e: LED_code(3);break;//3
			case 0xed: LED_code(4);break;//4
			case 0xdd: LED_code(5);break;//5
			case 0xbd: LED_code(6);break;//6
			case 0x7d: LED_code(7);break;//7
			case 0xeb: LED_code(8);break;//8
			case 0xdb: LED_code(9);break;//9
			case 0xbb: LED_code(10);break;//a
			case 0x7b: LED_code(11);break;//b
			case 0xe7: LED_code(12);break;//c
			case 0xd7: LED_code(13);break;//d
			case 0xb7: LED_code(14);break;//e
			case 0x77: LED_code(15);break;//f
		}
	}

	uchar scan_keyboard()
	{
		uchar row_wire, col_wire; //定义行线和列线，行线0-3，列线4-7
		P1 = 0xf0; //行线输出全为0,列线输出全为1
		col_wire = P1 & 0xf0; //读入列线值
		if(col_wire != 0xf0)
		{
			delay_ms(1); //去抖延时
			if(col_wire != 0xf0)
			{
				col_wire = P1 & 0xf0; //读入列线值
				P1 = col_wire | 0x0f; //输出当前列线值
				row_wire = P1 & 0x0f; //读入行线值
				return(col_wire + row_wire);//键盘最后组合码值
			}
		}

		return 0x00;

	}
